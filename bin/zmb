#!/usr/bin/ruby

$:.unshift File.dirname(__FILE__) + "/../lib"

require 'zmb'
require 'optparse'

class AdminUser
  attr_accessor :username, :userhosts
  
  def initialize
    @username = 'admin'
    @userhosts = []
  end
  
  def admin?
    true
  end
  
  def permission?(perm)
    true
  end
  
  def authenticated?
    true
  end
end

class Event
  attr_accessor :message
  
  def initialize(message)
    @message = message
  end
  
  def message?
    true
  end
  
  def private?
    true
  end
  
  def user
    AdminUser.new
  end
  
  def reply(msg)
    puts "> #{msg}"
  end
end

def ask(question)
  puts "#{question} (yes/no)"
  answer = gets.chomp
  answer == 'yes' or answer == 'y'
end

def get_value(question)
  puts question
  answer = gets.chomp
  
  return nil if answer == ''
  answer
end

def wizard(zmb, plugin)
  STDOUT.flush
  
  if ask("Would you like to add the #{plugin.name} plugin? #{plugin.description}") then
    if plugin.multi_instances? then
      instance = get_value("What would you like to name this instance of #{plugin.name}?")
    else
      instance = plugin.name
    end
    
    if not instance then
      puts "Must supply instance name, if this plugin should only be loaded once such as commands or users then you can call it that."
      return wizard zmb, plugin
    end
    
    zmb.setup(plugin.name, instance)
    obj = zmb.plugin_manager.plugin plugin.name
    if obj.respond_to?('wizard') then
      settings = zmb.settings.setting(instance)
      settings['plugin'] = plugin.name
      
      obj.wizard.each do |key, value|
        if value.has_key?('help') then
          set = get_value("#{value['help']} (default=#{value['default']})")
          settings[key] = set if set
        end
      end
      
      zmb.settings.save(instance, settings)
    end
    zmb.load instance
  end
end

options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: zmb [options]"
  
  options[:settings] = nil
  opts.on('-s', '--settings SETTING', 'Use a settings folder') do |settings|
    options[:settings] = settings
  end
  
  options[:daemon] = false
  opts.on('-d', '--daemon', 'Run ZMB') do
    options[:daemon] = true
  end
  
  options[:create] = false
  opts.on('-c', '--create', 'Create a new ZMB settings file') do
    options[:create] = true
  end
  
  options[:shell] = false
  opts.on('-b', '--shell', 'Create a commands shell') do
    options[:shell] = true
  end
  
  options[:command] = false
  opts.on('-l', '--line LINE', 'Execute a command') do |line|
    options[:command] = line
  end
end

optparse.parse!

if not options[:settings] then
  options[:settings] = File.expand_path('~/.zmb')
  puts "No settings file specified, will use #{options[:settings]}"
end

zmb = Zmb.new(options[:settings])

if options[:create] then
  STDOUT.flush
  
  zmb.save
  
  while ask('Would you like to add additional plugin sources?')
    source = get_value('Which path?')
    if source and File.exists?(source) then
      zmb.plugin_manager.add_plugin_source source
      puts 'Source added'
      zmb.save
    else
      puts 'Invalid source'
    end
  end
  
  zmb.plugin_manager.plugins.reject{ |plugin| zmb.instances.has_key? plugin.name }.each{ |plugin| wizard(zmb, plugin) }
  
  if zmb.instances.has_key?('users') and ask('Would you like to add a admin user?') then
    username = get_value('Username:')
    password = get_value('Password:')
    userhost = get_value('Userhost: (Leave blank for none)')
    zmb.instances['users'].create_user(username, password, userhost).permit('admin')
  end
  
  zmb.save
end

if options[:command] then
  zmb.event(nil, Event.new(options[:command]))
  zmb.save
end

if options[:shell] then
  STDOUT.flush
  
  begin
    while 1
      zmb.event(nil, Event.new(gets.chomp))
    end
  rescue Interrupt
    zmb.save
  end
end

if options[:daemon] then
  zmb.run
end
