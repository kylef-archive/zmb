#!/usr/bin/ruby

$:.unshift File.dirname(__FILE__) + "/../lib"

require 'zmb'
require 'optparse'

def ask(question)
  puts "#{question} (yes/no)"
  answer = gets.chomp
  answer == 'yes' or answer == 'y'
end

def get_value(question)
  puts question
  answer = gets.chomp
  
  return nil if answer == ''
  answer
end

def wizard(zmb, plugin)
  STDOUT.flush
  
  if ask("Would you like to add the #{plugin} plugin?") then
    instance = get_value("What would you like to name this instance of #{plugin}?")
    
    if not instance then
      puts "Must supply instance name"
      return wizard zmb, plugin
    end
    
    zmb.setup(plugin, instance)
    settings = zmb.settings.setting(instance)
    
    obj = zmb.plugin_manager.plugin plugin
    if obj.respond_to?('wizard') then
      obj.wizard.each do |key, value|
        if value.has_key?('help') then
          set = get_value("#{value['help']} (default=#{value['default']})")
          settings[key] = set
        end
      end
    end
      
    zmb.settings.save(instance, settings)
    zmb.load instance
  end
end

options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: zmb [options]"
  
  options[:settings] = nil
  opts.on('-s', '--settings SETTING', 'Use a settings folder') do |settings|
    options[:settings] = settings
  end
  
  options[:daemon] = false
  opts.on('-d', '--daemon', 'Run ZMB') do
    options[:daemon] = true
  end
  
  options[:create] = false
  opts.on('-c', '--create', 'Create a new ZMB settings file') do
    options[:create] = true
  end
  
  options[:shell] = false
  opts.on('-b', '--shell', 'Create a commands shell') do
    options[:shell] = true
  end
end

optparse.parse!

if not options[:settings] then
  puts "Settings file required"
  exit
end

zmb = Zmb.new(options[:settings])

if options[:create] then
  STDOUT.flush
  
  zmb.save
  zmb.plugin_manager.add_plugin_source File.join(File.expand_path(File.dirname(File.dirname(__FILE__))), "plugins")
  
  zmb.setup('commands', 'commands')
  zmb.load 'commands'
  zmb.setup('users', 'users')
  zmb.load 'users'
  
  if ask('Would you like to add a user (as a admin)?') then
    username = get_value("What username would you like to use?")
    password = get_value("What password would you like to use?")
    userhost = get_value("What userhost would you like to use? (This must be your userhost in IRC, perform a WHOIS on yourself). Example: ~zynox@isp.com")
    zmb.instances['users'].create_user(username, password, userhost).permit('admin')
  end
  
  wizard zmb, 'irc'
  
  zmb.save
end

if options[:shell] then
  class AdminUser
    attr_accessor :username, :userhosts
    
    def initialize
      @username = 'admin'
      @userhosts = []
    end
    
    def admin?
      true
    end
    
    def permission?(perm)
      true
    end
    
    def authenticated?
      true
    end
  end
  
  class Event
    attr_accessor :message
    
    def initialize(message)
      @message = message
    end
    
    def message?
      true
    end
    
    def private?
      true
    end
    
    def user
      AdminUser.new
    end
    
    def reply(msg)
      puts "> #{msg}"
    end
  end
  
  STDOUT.flush
  
  begin
    while 1
      zmb.event(nil, Event.new(gets.chomp))
    end
  rescue Interrupt
    zmb.save
  end
end

if options[:daemon] then
  zmb.run
end
