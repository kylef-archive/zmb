#!/usr/bin/ruby

$:.unshift File.dirname(__FILE__) + "/../lib"

require 'zmb'
require 'optparse'

class AdminUser
  def username; 'admin'; end
  def userhost; 'admin@zmb'; end
  def admin?; true; end
  def permission?(perm); true; end
  def authenticated?; true; end
end

class Event
  attr_accessor :message, :user, :delegate
  
  def initialize(message)
    @message = message
  end
  
  def message?; true; end
  def private?; true; end
  def name; "admin"; end
  def user; AdminUser.new; end
  def reply(msg); notice "#{msg}"; end
end

class Tty
  class <<self
    def blue; color 34; end
    def red; color 31; end
    def yellow; color 33 ; end
    def reset; escape 0; end
    
  private
    def color n
      escape "0;#{n}"
    end
    def bold n
      escape "1;#{n}"
    end
    def underline n
      escape "4;#{n}"
    end
    def escape n
      "\033[#{n}m" if $stdout.tty?
    end
  end
end

def question(message)
  print "#{Tty.blue}[ #{Tty.yellow}?? #{Tty.blue}]#{Tty.reset} #{message}"
end

def warning(message)
  puts "#{Tty.blue}[ #{Tty.yellow}** #{Tty.blue}]#{Tty.reset} #{message}"
end

def error(message)
  puts "#{Tty.blue}[ #{Tty.red}!! #{Tty.blue}]#{Tty.reset} #{message}"
end

def notice(message)
  puts "#{Tty.blue}[#{Tty.reset} ok #{Tty.blue}]#{Tty.reset} #{message}"
end

def question_bool(message)
  question(message + ' (yes/no): ')
  answer = gets.chomp
  answer == 'yes' or answer == 'y'
end

def question_string(message='')
  message += ': ' unless message == ''
  question(message)
  answer = gets.chomp
  
  return nil if answer == ''
  answer
end

def wizard(zmb, plugin)
  STDOUT.flush
  
  if question_bool("Would you like to add the #{plugin.name} plugin? #{plugin.description}") then
    if plugin.multi_instances? then
      instance = question_string("What would you like to name this instance of #{plugin.name}?")
    else
      instance = plugin.name
    end
    
    if not instance then
      notice "Must supply instance name, if this plugin should only be loaded once such as commands or users then you can call it that."
      return wizard(zmb, plugin)
    end
    
    zmb.setup(plugin.name, instance)
    obj = zmb.plugin_manager.plugin plugin.name
    if obj.respond_to?('wizard') then
      settings = zmb.settings_manager.setting(instance)
      settings['plugin'] = plugin.name
      
      obj.wizard.each do |key, value|
        if value.has_key?('help') then
          set = question_string("#{value['help']} (default=#{value['default']})")
          settings[key] = set if set
        end
      end
      
      zmb.settings_manager.save(instance, settings)
    end
    zmb.load instance
  end
end

options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: zmb [options]"
  
  opts.on('-h', '--help', 'Displays this usage screen') do
    puts optparse
    exit
  end
  
  options[:settings] = nil
  opts.on('-s', '--settings SETTING', 'Use a settings folder') do |settings|
    options[:settings] = settings
  end
  
  options[:daemon] = false
  opts.on('-d', '--daemon', 'Run ZMB') do
    options[:daemon] = true
  end
  
  options[:wizard] = false
  opts.on('-w', '--wizard', 'Interactively create a new config file') do
    options[:wizard] = true
  end
  
  options[:shell] = false
  opts.on('-S', '--shell', 'Create a commands shell') do
    options[:shell] = true
  end
  
  options[:command] = false
  opts.on('-l', '--line LINE', 'Execute a command') do |line|
    options[:command] = line
  end
  
  options[:foreground] = false
  opts.on('-f', '--foreground', 'Don\'t fork into the background') do
    options[:foreground] = true
  end
  
  options[:debug] = false
  opts.on('-D', '--daemon', 'Output debugging information (Implies -f)') do
    options[:foreground] = true
    options[:debug] = true
  end
end

optparse.parse!

if not options[:settings] then
  options[:settings] = File.expand_path('~/.zmb')
  notice "No settings file specified, will use #{options[:settings]}"
end

zmb = Zmb.new(options[:settings])

if options[:wizard] then
  STDOUT.flush
  
  zmb.save
  
  while question_bool('Would you like to add additional plugin sources?')
    source = question_string('Which path?')
    if source and File.exists?(source) then
      zmb.plugin_manager.add_plugin_source source
      notice "Source added"
      zmb.save
    else
      warning "Invalid source directory, does this folder exist?"
    end
  end
  
  zmb.plugin_manager.plugins.reject{ |plugin| zmb.instances.has_key? plugin.name }.each{ |plugin| wizard(zmb, plugin) }
  
  if zmb.instances.has_key?('users') and question_bool('Would you like to add a admin user?') then
    username = question_string('Username:')
    password = question_string('Password:')
    userhost = question_string('Userhost: (Leave blank for none)')
    zmb.instances['users'].create_user(username, password, userhost).permit('admin')
  end
  
  zmb.save
end

if options[:command] then
  zmb.event(nil, Event.new(options[:command]))
  zmb.save
end

if options[:shell] then
  STDOUT.flush
  
  begin
    while 1
      zmb.event(nil, Event.new(question_string))
    end
  rescue Interrupt
    zmb.save
    puts
    warning "Exiting"
  end
end

zmb.debug = options[:debug]

if options[:daemon] then
  if options[:foreground] then
    zmb.run
    warning "Exiting"
  else
    notice "Forking into the background (pid: #{zmb.run_fork})"
  end
end
